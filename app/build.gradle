apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion version_setup_compileSdk
    buildToolsVersion version_setup_buildTools

    defaultConfig {
        minSdkVersion version_setup_minSdk
        targetSdkVersion version_setup_targetSdk

        flavorDimensions "versionCode"

        versionCode 29
        versionName "0.5.6(alpha)"

        applicationId "com.benny.openlauncher"
        resValue 'string', 'app_name', "OpenLauncher"

        buildConfigField "boolean", "IS_TEST_BUILD", "false"
        buildConfigField "boolean", "IS_GPLAY_BUILD", "false"
        buildConfigField("String[]", "APPLICATION_LANGUAGES", '{' + getUsedAndroidLanguages().collect {"\"${it}\""}.join(",")  + '}')
        multiDexEnabled false
    }

    productFlavors {
        flavorDefault {
        }

        flavorGplay {
            buildConfigField "boolean", "IS_GPLAY_BUILD", "true"
        }

        flavorGplayPreAlpha {
            buildConfigField "boolean", "IS_GPLAY_BUILD", "true"
            buildConfigField "boolean", "IS_GPLAY_PREALPHA_BUILD", "true"
            resValue 'string', 'app_name', "OL PreAlpha"

            versionCode = Integer.parseInt(new Date().format('yyMMdd'))
            versionName = "0.5.7(pre-alpha)"
            applicationId "com.benny.openlauncherprealpha"
        }

        flavorTest {
            buildConfigField "boolean", "IS_TEST_BUILD", "true"
            resValue 'string', 'app_name', "OL Nightly"

            versionCode = Integer.parseInt(new Date().format('yyMMdd'))
            versionName = new Date().format('yyMMdd')
            applicationId "io.github.openlauncherteam.openlauncher.test"
        }
    }

    lintOptions {
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    configurations.all {
        resolutionStrategy.force "com.android.support:preference-v7:${version_library_appcompat}"
        resolutionStrategy.force "com.android.support:design:${version_library_appcompat}"
        resolutionStrategy.force "com.android.support:cardview-v7:${version_library_appcompat}"
        resolutionStrategy.force "com.android.support:support-v13:${version_library_appcompat}"
    }
}

dependencies {
    // UI Libs
    implementation 'com.mikepenz:fastadapter:3.0.0@aar'
    implementation 'com.mikepenz:fastadapter-commons:3.0.0@aar'
    implementation 'com.mikepenz:fastadapter-extensions:3.0.0@aar'

    implementation ('com.github.ozodrukh:CircularReveal:2.0.1@aar') {
        transitive = true
    }

    implementation 'com.github.kizitonwose.colorpreference:support:1.0.4'
    implementation 'com.github.daniel-stoneuk:material-about-library:2.2.3-support26.1.0'
    implementation 'com.afollestad.material-dialogs:core:0.9.4.5'
    implementation 'com.balysv:material-ripple:1.0.2'
    implementation 'com.amulyakhare:com.amulyakhare.textdrawable:1.0.1'
    implementation 'agency.tango.android:material-intro-screen:0.0.5'
    implementation 'cat.ereza:customactivityoncrash:1.5.0'
    implementation 'de.psdev.licensesdialog:licensesdialog:1.8.2'
    implementation 'com.jaredrummler:colorpicker:1.0.1'
    implementation 'in.championswimmer:SimpleFingerGestures_Android_Library:1.2'
    // Tools
    implementation "com.jakewharton:butterknife:${version_library_butterknife}"
    // Android-Apt
    kapt "com.jakewharton:butterknife-compiler:${version_library_butterknife}"
    implementation project(':core')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$version_plugin_kotlin"
}
repositories {
    mavenCentral()
}

@SuppressWarnings(["UnnecessaryQualifiedReference", "SpellCheckingInspection"])
static String[] getUsedAndroidLanguages() {
    Set<String> langs = new HashSet<>()
    new File('.').eachFileRecurse(groovy.io.FileType.DIRECTORIES) {
        final foldername = it.name
        if (foldername.startsWith('values-') && !it.canonicalPath.contains("build" + File.separator + "intermediates")) {
            new File(it.toString()).eachFileRecurse(groovy.io.FileType.FILES) {
                if (it.name.toLowerCase().endsWith(".xml") && it.getCanonicalFile().getText('UTF-8').contains("<string")) {
                    langs.add(foldername.replace("values-", ""))

                }
            }
        }
    }
    return langs.toArray(new String[langs.size()])
}

